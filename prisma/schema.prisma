generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  email        String        @unique
  password     String
  avatar       String?
  role         String        @default("user")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lastLoginAt  DateTime?
  refreshToken String?
  isActive     Boolean       @default(true)
  activities   Activity[]
  audioJobs    AudioJob[]
  membership   Membership?
  translations Translation[]
  usageStats   UsageStats?
  settings     UserSettings?

  @@map("users")
}

model Membership {
  id        String    @id @default(uuid())
  type      String
  startDate DateTime  @default(now())
  endDate   DateTime?
  isActive  Boolean   @default(true)
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("memberships")
}

model UsageStats {
  id               String @id @default(uuid())
  studyHours       Float  @default(0)
  recognitionCount Int    @default(0)
  fileCount        Int    @default(0)
  translationCount Int    @default(0)
  summaryCount     Int    @default(0)
  userId           String @unique
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_stats")
}

model Activity {
  id          String    @id @default(uuid())
  title       String
  description String?
  type        String
  icon        String?
  iconBg      String?
  createdAt   DateTime  @default(now())
  userId      String
  audioJobId  String?
  audioJob    AudioJob? @relation(fields: [audioJobId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([audioJobId], map: "activities_audioJobId_fkey")
  @@index([userId], map: "activities_userId_fkey")
  @@map("activities")
}

model AudioJob {
  id             String     @id @default(uuid())
  filename       String?
  fileUrl        String?
  duration       Float?
  status         String
  sourceText     String?    @db.Text
  translatedText String?    @db.Text
  summary        String?    @db.Text
  sourceLanguage String?
  targetLanguage String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  userId         String
  activities     Activity[]
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "audio_jobs_userId_fkey")
  @@map("audio_jobs")
}

model Translation {
  id             String   @id @default(uuid())
  sourceText     String   @db.Text
  translatedText String   @db.Text
  sourceLanguage String
  targetLanguage String
  isFavorite     Boolean  @default(false)
  isVoice        Boolean  @default(false)
  createdAt      DateTime @default(now())
  userId         String
  duration       Float
  errorMessage   String?  @db.Text
  outputMp3Path  String?  @db.Text
  status         String   @default("success")
  tags           String?  @db.Text
  taskId         String?
  taskStatus     String?
  timestamp      BigInt
  title          String
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "translations_userId_fkey")
  @@map("translations")
}

model UserSettings {
  id                    String  @id @default(uuid())
  defaultSourceLanguage String  @default("zh_cn")
  defaultTargetLanguage String  @default("en_us")
  autoTranslate         Boolean @default(true)
  autoSpeak             Boolean @default(false)
  speechRate            Float   @default(1)
  theme                 String  @default("system")
  userId                String  @unique
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}
